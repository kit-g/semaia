AWSTemplateFormatVersion: "2010-09-09"
Description: "Semaia main stack"
Transform: "AWS::Serverless-2016-10-31"

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 128
    Handler: app.handler
    Timeout: 5
    Environment:
      Variables:
        REGION: !Ref AWS::Region

Mappings:
  Env:
    prod:
      CloudFrontCertificate: "arn:aws:acm:us-east-1:583168578067:certificate/a75e5272-2b90-45d2-abbd-0b52b158f1d7"
      CloudFrontDomainName: "semaia.awry.me"
      GatewayCertificate: "arn:aws:acm:us-east-1:583168578067:certificate/eebb2e14-3cd9-437c-a131-c494b4b83d3f"
      GatewayDomainName: "api.semaia.awry.me"

Parameters:
  Env:
    Type: String
  GeminiApiKey:
    Type: String
    NoEcho: true
  TableName:
    Type: String
    Default: "semaia-db"
  LayersBucket:
    Type: String
    Default: "583168578067-lambda-layers"


Resources:
  WorkoutsDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: false
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TableName: !Ref TableName

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: "DynamoDBAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt WorkoutsDatabase.Arn

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "semaia-api"
      Description: "Semaia app API"
      DisableExecuteApiEndpoint: true

  PsycopgLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "psycopg2"
      Description: "Lambda Layer for psycopg2 library"
      Content:
        S3Bucket: !Ref LayersBucket
        S3Key: "psycopg-py3.12-layer.zip"
      CompatibleRuntimes:
        - python3.12
        - python3.13

  PsycopgLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref PsycopgLayer
      Principal: "*"

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./api
      Description: 'Part of Semaia: API handler'
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          GEMINI_API_KEY: !Sub '{{resolve:secretsmanager:${GeminiApiKey}:SecretString:GEMINI_API_KEY}}'
      FunctionName: 'semaia-api'
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
      Layers:
        - !Ref PsycopgLayer
      Role: !GetAtt ApiRole.Arn
      Timeout: 60

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizer
      Description: 'Part of Semaia: authorizer'
      Environment:
        Variables:
          ACCOUNT: !Ref AWS::AccountId
          REGION: !Ref AWS::Region
      FunctionName: 'semaia-authorizer'
      Layers:
        - !Sub "arn:aws:lambda:ca-central-1:${AWS::AccountId}:layer:firebase:2"
      Policies:
        - AWSLambdaVPCAccessExecutionRole

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerFunction
      Principal: apigateway.amazonaws.com

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub
        - "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${function}/invocations"
        - function: !GetAtt AuthorizerFunction.Arn
          region: !Ref AWS::Region
      IdentitySource: "method.request.header.Authorization"
      Name: "general-authorizer"
      RestApiId: !Ref Api
      Type: REQUEST

  ApiFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Api
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApiFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref Api

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      RestApiId: !Ref Api
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations

  RestApiDeployment:
    DependsOn:
      - ApiMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api

  V1Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Api
      StageName: "v1"
      DeploymentId: !Ref RestApiDeployment

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !FindInMap [ Env, !Ref Env, GatewayCertificate ]
      DomainName: !FindInMap [ Env, !Ref Env, GatewayDomainName ]

  DomainNameMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref Api
      Stage: !Ref V1Stage

Outputs:
  Api:
    Description: "Part of Semaia: API domain name"
    Value: !Ref DomainNameMapping
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-api"
#
#  Distribution:
#    Description: "Part of Semaia: web app's distribution"
#    Value: !GetAtt CloudFrontStack.Outputs.Distribution
#    Export:
#      Name:
#        Fn::Sub: "${AWS::StackName}-Distribution"
